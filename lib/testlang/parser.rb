#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.11
# from Racc grammer file "".
#

require 'racc/parser.rb'
module Testlang
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 11)
  def parse(tokens)
    @tokens = tokens
	
	do_parse
  end
  
  def next_token
    @tokens.shift
  end
...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
     2,     3,     4,     5,     6 ]

racc_action_check = [
     0,     1,     2,     3,     4 ]

racc_action_pointer = [
    -2,     1,    -1,     3,     0,   nil,   nil ]

racc_action_default = [
    -2,    -2,    -2,    -2,    -2,     7,    -1 ]

racc_goto_table = [
     1 ]

racc_goto_check = [
     1 ]

racc_goto_pointer = [
   nil,     0 ]

racc_goto_default = [
   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  3, 6, :_reduce_1 ]

racc_reduce_n = 2

racc_shift_n = 7

racc_token_table = {
  false => 0,
  :error => 1,
  :ID => 2,
  "(" => 3,
  ")" => 4 }

racc_nt_base = 5

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "ID",
  "\"(\"",
  "\")\"",
  "$start",
  "call" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.racc', 4)
  def _reduce_1(val, _values, result)
      result = [:script, [:call, val[0]]]

    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Testlang
