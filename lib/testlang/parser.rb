#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.11
# from Racc grammer file "".
#

require 'racc/parser.rb'
module Testlang
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 24)
  def parse(tokens)
    @tokens = tokens
	
	do_parse
  end
  
  def next_token
    @tokens.shift
  end
...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
     8,     7,     9,     5,     6,     2,     3,    10 ]

racc_action_check = [
     4,     3,     4,     2,     2,     0,     1,     9 ]

racc_action_pointer = [
     3,     6,     0,     1,    -3,   nil,   nil,   nil,   nil,     3,
   nil ]

racc_action_default = [
    -5,    -5,    -5,    -5,    -5,    -2,    -3,    11,    -1,    -5,
    -4 ]

racc_goto_table = [
     1,     4 ]

racc_goto_check = [
     1,     2 ]

racc_goto_pointer = [
   nil,     0,    -1 ]

racc_goto_default = [
   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  3, 7, :_reduce_1,
  2, 7, :_reduce_2,
  1, 8, :_reduce_3,
  3, 8, :_reduce_4 ]

racc_reduce_n = 5

racc_shift_n = 11

racc_token_table = {
  false => 0,
  :error => 1,
  "[" => 2,
  "]" => 3,
  :ITEM => 4,
  "," => 5 }

racc_nt_base = 6

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"[\"",
  "\"]\"",
  "ITEM",
  "\",\"",
  "$start",
  "array",
  "contents" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.racc', 6)
  def _reduce_1(val, _values, result)
                  result = val[1]
            
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 10)
  def _reduce_2(val, _values, result)
                  result = []
            
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 15)
  def _reduce_3(val, _values, result)
                  result = val
            
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 19)
  def _reduce_4(val, _values, result)
                  result.push val[2]
            
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Testlang
